<!-- Введение в базы данных SQL в PHP для новичков -->
<?php
    // Отправка запросов к базе данных
    // После соединения с базой к ней можно отправлять запросы. Это делается с помощью функции mysqli_query. Первым параметром эта функция принимает принимает переменную, в которую мы записали результат mysqli_connect, а вторым - строку с SQL запросом.

    $res = mysqli_query($link, 'SELECT * FROM users');  //К примеру, выполним запрос, который достанет все записи из таблицы users

    // Чтобы вывести ошибки SQL команд, следует пользоваться функцией mysqli_error, которую необходимо добавлять к каждому запросу к БД, вот так:
    $query = 'SELECT * FROM users';
	$res = mysqli_query($link, $query) or die(mysqli_error($link)); 

    // Как вы видите, после того, как произойдет запрос к базе, в переменной $res будет лежать результат этого действия. Однако лежит он не в той форме, которая нам нужна в PHP, а в той форме, в которой его прислала нам база.

    // Для того, чтобы получить результат в привычной нам форме, необходимо воспользоваться функцией mysqli_fetch_assoc, извлекающей из результата одну строку.
    $row = mysqli_fetch_assoc($res);
	var_dump($row);

    // И так можно можно вызывать нашу функцию до тех пор, пока работники не закончатся. Как только это произойдет, то следующий вызов функции вернет false.
    $row7 = mysqli_fetch_assoc($res);
	var_dump($row7); // выведет NULL - работники кончились 

    // Получение результата в виде массива при SQL запросе в PHP
    // При считывании по рядам можно не выводить каждого работника, а записывать их в какой-нибудь массив:
    $row1 = mysqli_fetch_assoc($res);
	$data[] = $row1;
	
	$row2 = mysqli_fetch_assoc($res);
	$data[] = $row2;
	
	$row3 = mysqli_fetch_assoc($res);
	$data[] = $row3;
	
	$row4 = mysqli_fetch_assoc($res);
	$data[] = $row4;
	
	$row5 = mysqli_fetch_assoc($res);
	$data[] = $row5;
	
	$row6 = mysqli_fetch_assoc($res);
	$data[] = $row6;

    // В результате в переменной $data получится следующий двухмерный массив:
    [
		['id' => 1, 'name' => 'user1', 
			'age' => 23, 'salary' => 400], 
		['id' => 2, 'name' => 'user2', 
			'age' => 25, 'salary' => 500], 
		['id' => 3, 'name' => 'user3', 
			'age' => 23, 'salary' => 500], 
		['id' => 4, 'name' => 'user4', 
			'age' => 30, 'salary' => 900], 
		['id' => 5, 'name' => 'user5', 
			'age' => 27, 'salary' => 500], 
		['id' => 6, 'name' => 'user6', 
			'age' => 28, 'salary' => 900], 
	]


    // Формирование массива в цикле при SQL запросе в PHP
    // Конечно же, в ручную перебирать всех работников не очень удобно. Пусть лучше за нас это сделает цикл:
    for ($data = []; $row = mysqli_fetch_assoc($res); 
    $data[] = $row); 
    var_dump($data); // здесь будет массив с результатом

    Давайте разберемся, как работает этот цикл.

    // В каждой итерации цикла функция mysqli_fetch_assoc последовательно считывает каждую строку результата, записывая его в массив $data.

    // Как только в $res закончатся строки, то mysqli_fetch_assoc вернет NULL и цикл закончит свою работу. А полученный результат будет лежать в двухмерном массиве $data.

    // Выборка записей при SQL запросе к базе в PHP
	$query = "SELECT * FROM таблица WHERE условие";
	// В условии допустимы следующие операции сравнения: =, !=, <>, <, >, <=, >=.
	// Выберем юзера с именем 'user1'.
	$query = "SELECT * FROM users WHERE name='user1'"; 

	// Логические операции в SQL запросе в PHP
	// В условии выборки можно делать более сложные комбинации с помощью команд OR и AND. Работают они так же, как и их аналоги в PHP конструкции if.

	// Поля выборки при SQL запросе в PHP
	// Для этого вместо звездочки, которую мы ставим после команды SELECT, через запятую можно перечислить имена нужных полей.
	 
	// Вставка записей через SQL запрос в PHP

?>