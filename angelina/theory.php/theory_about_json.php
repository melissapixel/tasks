<?php
    // Формат JSON в PHP
    
    // Сам формат представляет собой некую многомерную структуру, состоящую из обычных и ассоциативных массивов. Элементами массивов могут быть строки обязательно в двойных кавычках, числа, значения true, false или null.
    $str = '[1, "a", true, false, null]';

    // Давайте теперь сделаем ассоциативный массив. В терминах JavaScript такие массивы называются объектами. Объекты заключаются в фигурные скобки, а ключи отделяются от значений двоеточиями. При этом ключами таких массивов должны служить строки обязательно в двойных кавычках. Сделаем пример объекта:
    $str = '{
		"a": 1,
		"b": 2,
		"c": 3
	}';

    // Можно комбинировать массивы и объекты в структурах любого уровня вложенности:
    $str = '{
		"a": [1, 2, 3],
		"b": [4, 5, 6] 
        //  Учтите, что висящие запятые после последнего элемента в формате JSON недопустимы:
	}';


    // Преобразование данных в JSON в PHP
    // С помощью функции json_encode можно автоматически преобразовывать данные в PHP формате в формат JSON.
    $data = [1, 2, 3];
    $json = json_encode($data);
    var_dump($json); // выведет '[1,2,3]'

    // Преобразование данных из JSON в PHP
    // С помощью функции json_decode можно автоматически преобразовывать данные из формата JSON в PHP структуры.
    $json = '[1, 2, 3]';
    $data = json_decode($json);
    var_dump($data); // массив [1, 2, 3]


    // Преобразование объектов из JSON в PHP
    // При преобразовании объектов JSON есть нюансы. Дело в том, что они преобразуются не в ассоциативные массивы PHP, а в объекты PHP.
    $json = '{
		"a": 1,
		"b": 2,
		"c": 3
	}';
    $data = json_decode($json);
    var_dump($data); // объект PHP
    echo $data->a; // выведет 1
	echo $data->b; // выведет 2
	echo $data->c; // выведет 3



    // Объекты из JSON в ассоциативные массивы в PHP
    // Можно сделать так, чтобы объекты JSON преобразовывались в ассоциативные массивы в PHP. Для этого нужно второй параметр функции json_decode установить в значение true.
    $json = '{
		"a": 1,
		"b": 2,
		"c": 3
	}';
    $data = json_decode($json, true);
    var_dump($data); // ['a' => 1, 'b' => 2, 'c' => 3]


    // Отправка данных в формате JSON в PHP
    // При работе сайта часто бывает так, что некоторые URL отдают не HTML код, а JSON. 
    $data = [1, 2, 3];
	$json = json_encode($data);
	echo $json;
    // Более правильным будет отдать при этом соответствующий HTTP заголовок:
    header('Content-Type: application/json');
	echo $json;

    // Обработка некорректности JSON в PHP
    // Бывает такое, что строка с JSON построена некорректно. В этом случае функция json_decode вернет null.
    $json = '["a", "b", "c",]';
    $data = json_decode($json);
	var_dump($data); // выведет null

    // Так как возникала ошибка, то json_last_error при вызове выдаст номер этой ошибки:
    $error = json_last_error();
	var_dump($error); // номер ошибки
    
    switch (json_last_error()) {
		case JSON_ERROR_NONE:
			echo 'ошибок нет';
		break;
		case JSON_ERROR_DEPTH:
			echo 'достигнута максимальная 
				глубина стека'; 
		break;
		case JSON_ERROR_STATE_MISMATCH:
			echo 'некорректные разряды или 
				несоответствие режимов'; 
		break;
		case JSON_ERROR_CTRL_CHAR:
			echo 'некорректный управляющий 
				символ'; 
		break;
		case JSON_ERROR_SYNTAX:
			echo 'синтаксическая ошибка, некорректный 
				JSON'; 
		break;
		case JSON_ERROR_UTF8:
			echo 'некорректные символы UTF-8, 
				возможно неверно закодирован'; 
		break;
		default:
			echo 'неизвестная ошибка';
		break;
	}



?>