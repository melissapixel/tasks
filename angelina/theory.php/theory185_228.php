<?php
    // плюс + (один и более раз)
    // звездочка * (ноль или более раз)
    // вопрос ? (ноль или один раз)

    // Введение в регулярные выражения в PHP
    // Регулярные выражения - это такие команды для сложного поиска и замены. Они позволяют делать очень интересные вещи, но, к сожалению, довольно тяжелы в освоении.
    preg_replace('#a#', '!', 'bab'); // вернет 'b!b' 

    preg_replace('#x.x#', '!', 'xax eee'); // вернет '! eee' 

    $str = 'xx xax xaax xaaax xbx';
	$res = preg_replace('#xa+x#', '!', $str); //'xx ! ! ! xbx'

    $str = 'xx xax xaax xaaax xbx';
	$res = preg_replace('#xa*x#', '!', $str); //'! ! ! ! xbx'

    $str = 'xx xax xaax xbx';
	$res = preg_replace('#xa?x#', '!', $str); //'! ! xaax xbx'

    $str = 'xx xax xaax xbx';
	$res = preg_replace('#xa?x#', '!', $str);

    // В следующем примере шаблон поиска выглядит так: буква 'x', далее строка 'ab' один или более раз, потом буква 'x':
    $str = 'xabx xababx xaabbx';
	$res = preg_replace('#x(ab)+x#', '!', $str); //'! ! xaabbx'

    $str = 'a+x ax aax aaax';
	$res = preg_replace('#a+x#', '!', $str); //'a+x ! ! !'

    $str = 'a+x ax aax aaax';
	$res = preg_replace('#a\+x#', '!', $str); //'! ax aax aaax'

    $str = 'a.x abx azx';
	$res = preg_replace('#a\.x#', '!', $str); //'! abx azx'

    $str = 'a.x abx azx';
	$res = preg_replace('#a.x#', '!', $str); //'! ! !'

    preg_replace('#a.x#', '!', 'a.x abx azx'); // вернет '! ! !', а ожидалось '! abx azx'

    // Являются спецсимволами: $ ^ . * + ? \ / {} [] () |
    // Не являются спецсимволами: @ : , ' " ; - _ = < > % # ~ ` & !

    // буква 'x', буква 'a' один или два раза, буква 'x'
    $str = 'xx xax xaax xaaax';
	$res = preg_replace('#xa{1,2}x#', '!', $str); //'xx ! ! xaaax'

    // буква 'x', буква 'a' два раза и более, буква 'x'
    $str = 'xx xax xaax xaaax';
	$res = preg_replace('#xa{2,}x#', '!', $str); //'xx xax ! !'

    // буква 'x', буква 'a' три раза, буква 'x'
    $str = 'xx xax xaax xaaax';
	$res = preg_replace('#xa{3}x#', '!', $str); //'xx xax xaax !'

    $str = 'aaa aaaaaaaaaa aaa';
	$res = preg_replace('#a{10}#', '!', $str); //'aaa ! aaa'

    // буква 'x', буква 'a' три раза раза и меньше, буква 'x'
    $str = 'xx xax xaax xaaax';
	$res = preg_replace('#xa{1,3}x#', '!', $str); //'xx ! ! !'

    $str = 'xx xax xaax xaaax';
	$res = preg_replace('#xa{0,3}x#', '!', $str); //'! ! ! !'

    // Регулярные выражения по умолчанию жадные. Это значит, что они захватывают максимальное возможное количество символов.

    // буква 'a', затем любой символ один или более раз, затем буква 'x'.
    $res = preg_replace('#a.+x#', '!', 'aeeex zzz x kkk'); // ! kkk
    
    $res = preg_replace('#a.+?x#', '!', $str);

    // Команда \d означает цифру от 0 до 9.
    // Команда \w обозначает цифру, латинскую букву или знак подчеркивания.
    // Команда \s обозначает пробел или пробельный символ: пробел, перевод строки, табуляцию.
    // если \d - цифра, то \D - не цифра.

    $str = '1 12 123';
	$res = preg_replace('#\d#', '!', $str); //'! !! !!!'

    $str = '123abc3@@';
	$res = preg_replace('#\D+#', '!', $str); //'123!3!'

    $str = '1 12 123 abc @@@';
	$res = preg_replace('#\s#', '!', $str); // '1!12!123!abc!@@@'

    $str = '1 12 123a Abc @@@';
	$res = preg_replace('#\w+#', '!', $str); // '! ! ! ! @@@'

    $str = '1 12 123 Abc @@@';
    $res = preg_replace('#\W+#', '!'); //'1!12!123!Abc!'

    // Группы символов \d и \w не очень гибкие. Даже такая простая задача, как найти все буквы, но не цифры - не может быть решена ими. Для таких задач следует использовать квадратные скобки, представляющие собой операцию ИЛИ.

    // между иксами любая буква от 'a' до 'z':
    $str = 'xax xbx xcx x@x';
	$res = preg_replace('#x[a-z]x#', '!', $str); //'! ! ! x@x'

    // между иксами любая буква от 'a' до 'k':
    $str = 'xax xbx xmx x@x';
	$res = preg_replace('#x[a-k]x#', '!', $str); //'! ! xmx x@x'

    // между иксами любая буква от 'A' до 'Z':
    $str = 'xax xBx xcx x@x';
	$res = preg_replace('#x[A-Z]x#', '!', $str); //'xax ! xcx x@x'

    // между иксами любая цифра от 0 до 9:
    $str = 'xax x1x x3x x5x x@x';
	$res = preg_replace('#x[0-9]x#', '!', $str); //'xax ! ! ! x@x'

    // между иксами любая цифра от 3 до 7:
    $str = 'xax x1x x3x x5x x@x';
	$res = preg_replace('#x[3-7]x#', '!', $str); //'xax x1x ! ! x@x'

    // между иксами любая буква от 'a' до 'z' или цифра от 1 до 9:
    $str = 'xax x1x x3x x5x x@x';
	$res = preg_replace('#x[a-z1-9]x#', '!', $str); //'! ! ! ! x@x'

    // между иксами любая буква от 'a' до 'z' или буква от 'A' до 'Z':
    $str = 'xax xBx xcx x5x x@x';
	$res = preg_replace('#x[a-zA-Z]x#', '!', $str); //'! ! ! x5x x@x'

    // между иксами любая буква от 'a' до 'z' или цифры 1, 2:
    $str = 'xax xbx x1x x2x x3x';
	$res = preg_replace('#x[a-z12]x#', '!', $str); //'! ! ! ! x3x'

    // между иксами буквы от 'a' до 'z' в количестве от 1 и более:
    $str = 'xx xabesx xaadx x123x xa3x';
	$res = preg_replace('#x[a-z]+x#', '!', $str); // 'xx ! ! ! x123x xa3x'

    // Сделаем так, чтобы количество букв могло быть и ноль:
    $str = 'xx xabesx xaadx x123x xa3x';
	$res = preg_replace('#x[a-z]*x#', '!', $str); //'! ! ! x123x xa3x'

    // команда [ab] ищет букву 'a' или 'b', то команда [^ab] будет искать все символы, кроме 'a' и 'b'.
    // буква 'x', затем НЕ буква 'a', не 'b' и не 'c', потом буква 'z':
    $str = 'xaz xbz xcz xez';
	$res = preg_replace('#x[^abc]z#', '!', $str); //'xaz xbz xcz !'

    // буква 'x', затем НЕ маленькая латинская буква, потом буква 'z':
    $str = 'xaz xbz x1z xCz';
	$res = preg_replace('#x[^a-z]z#', '!', $str); //'xaz xbz ! !'

    // Кириллические символы не входят в группу \w. Для их получения нужно использовать группу в квадратных скобках, вот так: [а-я]. Но даже с этой группой есть проблема - сюда не войдет буква 'ё'. Для ее включения нужно сделать вот так: [а-яё].
    // Кроме того, для корректной работы кириллицы в регулярке необходимо поставить модификатор u:
    $str = 'яяя ййй ёёё';
	$res = preg_replace('#[а-яё]#u', '!', $str);

    // Спецсимволы внутри [] становятся обычными символами. Это значит, что их не надо экранировать обратным слешем.

    // между иксами любая буква 'a', 'b', 'c', либо точка:
    $str = 'xax xbx xcx xdx x.x x@x';
	$res = preg_replace('#x[abc.]x#', '!', $str //'! ! ! xdx ! x@x'

    // между иксами любая маленькая латинская буква или точка:
    $str = 'xax xbx xcx x@x';
	$res = preg_replace('#x[a-z.]x#', '!', $str); //'! ! ! x@x'

    // Группы символов \d, \D, \w, \W, \s, \S внутри [] будут обозначать именно группы, то есть по-прежнему будут командами.

    // между иксами любая цифра, либо буква от 'a' до 'f':
    $str = 'xax xbx x1x x2x xhx x@x';
	$res = preg_replace('#x[\da-f]x#', '!', $str); // '! ! ! ! xhx x@x'

    // буква 'x', затем не цифра, не точка, и не маленькая латинская буква, затем буква 'z':
    $str = 'xaz x1z xAz x.z x@z';
	$res = preg_replace('#x[^\d.a-z]z#', '!', $str); //'xaz x1z ! x.z !'
    
    // Вы уже знаете, что спецсимволы внутри [] становятся обычными символами. Есть, однако, исключения: если вам нужны квадратные скобки как символы, то их нужно экранировать обратным слешем.

    // между иксами стоит квадратная скобка:
    $str = 'x]x xax x[x x1x';
	$res = preg_replace('#x[\[\]]x#', '!', $str); //'! xax ! x1x'

    // Как вы знаете, шляпка внутри [] делает отрицание, будучи написанной в начале скобок. Значит, она является спецсимволом внутри этих скобок. Чтобы получить шляпку как символ, нужно или заэкранировать ее, или убрать с первого места.
    
    // первый символ - это все кроме 'd', потом две буквы 'x'.
    $str = 'axx bxx ^xx dxx';
	$res = preg_replace('#[^d]xx#', '!', $str); //'! ! ! dxx'

    // первый символ - это 'd' или '^', потом две буквы 'x':
    $str = 'axx bxx ^xx dxx';
	$res = preg_replace('#[d^]xx#', '!', $str); //'axx bxx ! !'

    $str = 'axx bxx ^xx dxx';
	$res = preg_replace('#[\^d]xx#', '!', $str); //'axx bxx ! !'

    // Если вам нужен сам дефис как символ - то поставьте его там, где он не будет воспринят как разделитель группы.

    // цифра 1, затем буква от 'a' до 'z', затем цифра 2:
    $str = '1a2 1-2 1c2 1z2';
	$res = preg_replace('#1[a-z]2#', '!', $str); // '! 1-2 ! !'
    
    // цифра 1, затем буква 'a', или дефис, или буква 'z', затем цифра 2:
    $str = '1a2 1-2 1c2 1z2';
	$res = preg_replace('#1[a\-z]2#', '!', $str); // '! ! 1c2 !'

    $str = '1a2 1-2 1c2 1z2';
	$res = preg_replace('#1[az-]2#', '!', $str); //'! ! 1c2 !'

    // первый символ - это маленькие буквы или дефис '-', потом две буквы 'x':
    $str = 'axx Axx -xx @xx';
	$res = preg_replace('#[a-z-]xx#', '!', $str); //'! Axx ! @xx'

    // первый символ - это маленькие, большие буквы или дефис '-', потом две буквы 'x':
    $str = 'axx Axx -xx @xx';
	$res = preg_replace('#[a-zA-Z-]xx#', '!', $str); //'! ! ! @xx'

    $str = 'axx 9xx -xx @xx';
	$res = preg_replace('#[a-z-0-9]xx#', '!', $str); //'! ! ! @xx'

    

?>