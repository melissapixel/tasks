<?php
    // Чтение файлов в PHP
    // Функция file_get_contents позволяет выполнять чтение файла. Параметром функция принимает имя файла, а своим результатом возвращает текст этого файла.
    echo file_get_contents('task-1.php');

    // Комбинация операций чтения и записи файла в PHP
    // Абсолютные пути в PHP
    
    // Мы можем получить путь от корня операционной системы до папки с нашим сайтом:
    echo $_SERVER['DOCUMENT_ROOT'];

    // Можно также получить путь к самому файлу скрипта с помощью константы __FILE__:
    echo __FILE__;

    // Переименовывание файлов в PHP
    // Функция rename позволяет переименовывать файлы. Первым параметром указываем старое имя файла, вторым - новое имя файла:

    // Перемещение файлов в PHP
    // Функция rename позволяет также перемещать файлы. Для этого вторым параметром функции нужно указать новый путь к файлу. Давайте для примера перенесем наш файл в папку dir, одновременно переименовав его на new.txt:
    rename('test.txt', 'dir/new.txt');

    // Копирование файлов в PHP
    // Функция copy позволяет копировать файл. Первым параметром она принимает путь к файлу, который хотим копировать, вторым - новый путь файла, куда хотим положить копию. Мы можем сделать копию и положить ее рядом, или положить ее в другую папку. Сделаем просто копию:
    copy('test.txt', 'copy.txt');

    // Удаление файлов в PHP
    // Для удаления файлов используется функция unlink. Параметром она принимает путь к удаляемому файлу:
    unlink('test.txt');

    // Определение размера файлов в PHP
    // Функция filesize позволяет находить размеры файла в байтах. Пример:
    echo filesize('test.txt');

    // Размер в байтах легко можно перевести в килобайты:
    echo filesize('test.txt') / 1024;

    // А теперь давайте переведем в мегабайты:
    echo filesize('test.txt') / (1024 * 1024); 

    // Проверка существования файлов в PHP
    // Функция file_exists проверяет существует ли файл, путь к которому передан параметром. Пример:
    var_dump(file_exists('test.txt')); // true или false
    
    if (file_exists('test.txt')) {
		echo filesize('test.txt');
	} else {
		echo 'файла не существует';
	}

    // Создание папок в PHP
    // Функция mkdir позволяет создать папку. Параметром принимает путь к папке. Пример:
    mkdir('dir');

    // Удаление папок в PHP
    // Функция rmdir используется для удаления папок. Пример:
    rmdir('dir');

    // Переименование папок в PHP
    // С помощью функции rename можно переименовывать папки. Давайте попробуем:
    rename('old', 'new');

    // Перемещение папок в PHP
    // С помощью функции rename можно перемещать папки. Давайте попробуем:
    rename('old', 'dir/new');

    // Чтение содержимого папки в PHP
    // Функция scandir позволяет посмотреть содержимое папки и получить в виде массива имена находящихся в ней файлов и подпапок. Параметром функция принимает путь к файлу.
    // Пусть у нас для примера есть папка dir. Посмотрим на ее содержимое:
    $files = scandir('dir');
	var_dump($files);

    $files = scandir('dir');
	$files = array_diff($files, ['..', '.']); 
	var_dump($files);

    $files = array_diff(scandir('dir'), ['..', '.']); 
	var_dump($files);

    // Отличаем папку от файла в PHP
    // Пусть у вас есть строка, содержащая путь к файлу или папке. С помощью специальных функций is_file и is_dir мы можем отличить, ссылается путь на файл или на папку.
    $path = 'некий путь';
	
	var_dump(is_file($path)); // true для файла, false для папки 
	var_dump(is_dir($path));  // true для папки, false для файла 

    // Разбираем содержимое папки в PHP
    // Давайте получим массив имен из этой папки:
    $files = array_diff(scandir('dir'), ['..', '.']);

    $files = array_diff(scandir('dir'), ['..', '.']);
	
	foreach ($files as $file) {
		echo $file;
		var_dump(is_file('dir/' . $file));
	}
	$dir = 'dir';
	$files = array_diff(scandir($dir), ['..', '.']);
	
	foreach ($files as $file) {
		echo $file;
		var_dump(is_file($dir. '/' . $file));
	}

    $dir = 'dir';
	$files = array_diff(scandir($dir), ['..', '.']);
	
	foreach ($files as $file) {
		if (is_file($dir. '/' . $file)) {
			echo file_get_contents($dir. '/' . $file);
		}
	}

    $dir = 'dir';
	$files = array_diff(scandir($dir), ['..', '.']);
	
	foreach ($files as $file) {
		$path = $dir. '/' . $file; // путь 
			к файлу 
		
		if (is_file($path)) {
			echo file_get_contents($path);
		}
	}

    // Вставка файлов в PHP
    // Давайте выполним вставку содержимого второго файла в первый. Это делается с помощью оператора include:
    include 'test.php';
	echo 'index';

    // Деление верстки на элементы в PHP

    // Запись вставки в переменную в PHP

    // Подключение файлов в PHP
    require 'functions.php';

    // Однократное подключение файлов в PHP

    // Нас, однако, поджидает проблема. К файлу index.php файл pow.php будет подключен два раза: сам по себе и через файл pow.php.

    // Это приведет к проблеме, так как у нас будут два набора функций с одинаковыми именами.

    // Для решения проблемы следует подключать все файлы через оператор require_once - он будет подключать файл только один раз, игнорируя повторный подключения:
    require_once 'pow.php';
	require_once 'sum.php';
	
	echo square(3) + squareSum([1, 2, 3]);

    // Запись подключения в переменную PHP
    return ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
    $week = require 'week.php';
	var_dump($week);
?>